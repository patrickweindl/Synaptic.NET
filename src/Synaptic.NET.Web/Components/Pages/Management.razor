@page "/management"
@using Microsoft.AspNetCore.Authorization
@using Synaptic.NET.Domain.Abstractions.Storage
@using Synaptic.NET.Domain.Resources.Storage
@using Synaptic.NET.Domain.Abstractions.Management
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@using Synaptic.NET.Domain.Abstractions.Augmentation
@using Synaptic.NET.Domain.Resources.Management
@using Synaptic.NET.Domain.Resources
@using Microsoft.EntityFrameworkCore
@using System.Security.Cryptography
@using Synaptic.NET.Domain.Enums
@using Synaptic.NET.Domain.Abstractions.Services
@using Synaptic.NET.Domain.BackgroundTasks
@using Synaptic.NET.Augmentation.Handlers
@attribute [Authorize(AuthenticationSchemes = CookieAuthenticationDefaults.AuthenticationScheme)]
@rendermode InteractiveServer
@inject IMemoryProvider MemoryProvider
@inject ICurrentUserService CurrentUserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFileMemoryCreationService FileMemoryCreationService
@inject IArchiveService ArchiveService
@inject SynapticDbContext DbContext
@inject IBackgroundTaskQueue BackgroundTaskQueue

<PageTitle>Memory Management - Synaptic.NET</PageTitle>

<div class="management-header">
    <div class="container">
        <div class="user-info">
            <div class="avatar">
                <span>@GetUserInitials()</span>
            </div>
            <div class="user-details">
                <h1>Memory Management</h1>
                <p class="user-subtitle">@GetUserEmail()</p>
            </div>
        </div>
    </div>
</div>

<div class="management-content">
    <div class="container">
        <div class="dashboard-grid">
            <!-- Quick Stats -->
            <div class="stats-section">
                <h2>Overview</h2>
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-icon">üß†</div>
                        <div class="stat-content">
                            <div class="stat-number">@_memoryCount</div>
                            <div class="stat-label">Memories</div>
                        </div>
                    </div>
                    <div class="stat-card clickable-card" @onclick="ShowMemoryStoresModal">
                        <div class="stat-icon">üóÇÔ∏è</div>
                        <div class="stat-content">
                            <div class="stat-number">@_memoryStoreCount</div>
                            <div class="stat-label">Memory Stores</div>
                        </div>
                    </div>
                    <div class="stat-card clickable-card" @onclick="ShowApiKeysModal">
                        <div class="stat-icon">üîë</div>
                        <div class="stat-content">
                            <div class="stat-number">@_apiKeyCount</div>
                            <div class="stat-label">API Keys</div>
                        </div>
                    </div>
                    <div class="stat-card clickable-card" @onclick="ShowTaskQueueModal">
                        <div class="stat-icon">üìã</div>
                        <div class="stat-content">
                            <div class="stat-number">@_taskQueueCount</div>
                            <div class="stat-label">Background Tasks</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Main Content -->
            <div class="main-section">
                <div class="section-content">
                    <div class="section-header">
                        <h3>Memory Management</h3>
                        <p>Search, view and manage your stored memories</p>
                    </div>

                    <!-- File Upload Section -->
                    <div class="file-upload-section">
                        <h4>üìÅ Upload Files</h4>
                        <p>Upload PDF, Markdown, or Text files to add them to your memory stores.</p>
                        <EditForm Model="_uploadForm" OnValidSubmit="HandleFileUpload" class="upload-form">
                            <div class="upload-input-group">
                                <InputFile OnChange="OnFileSelected" class="file-input" id="file-input" accept=".pdf,.md,.txt,.rtf"/>
                                <label for="file-input" class="file-label">
                                    <span class="file-icon">üìé</span>
                                    @if (_selectedFile == null)
                                    {
                                        <span>Choose file to upload</span>
                                    }
                                    else
                                    {
                                        <span>@_selectedFile.Name</span>
                                    }
                                </label>
                                <button type="submit" class="upload-button" disabled="@_isUploading">
                                    @if (_isUploading)
                                    {
                                        <span>Processing...</span>
                                    }
                                    else
                                    {
                                        <span>Upload & Process</span>
                                    }
                                </button>
                            </div>
                            @if (!string.IsNullOrEmpty(_uploadMessage))
                            {
                                <div class="upload-message @(_uploadSuccess ? "success" : "error")">
                                    @_uploadMessage
                                </div>
                            }

                            @if (_isUploading && (!string.IsNullOrEmpty(_uploadProgress.Message) || _uploadProgress.Progress > 0))
                            {
                                <div class="progress-section">
                                    <div class="progress-header">
                                        <span class="progress-label">Processing File...</span>
                                        <span class="progress-percent">@((_uploadProgress.Progress * 100).ToString("F0"))%</span>
                                    </div>
                                    <div class="progress-bar">
                                        <div class="progress-fill" style="width: @((_uploadProgress.Progress * 100).ToString("F1"))%"></div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(_uploadProgress.Message))
                                    {
                                        <div class="progress-message">@_uploadProgress.Message</div>
                                    }
                                </div>
                            }
                        </EditForm>
                    </div>

                    <!-- Search Section -->
                    <div class="search-section">
                        <h4>üîç Search Memories</h4>
                        <EditForm Model="_searchForm" OnValidSubmit="HandleSearch" class="search-form">
                            <div class="search-input-group">
                                <InputText @bind-Value="_searchForm.Query" placeholder="Search memories with AI..." class="search-input"/>
                                <div class="search-options">
                                    <div class="option-group">
                                        <label>Limit:</label>
                                        <InputNumber @bind-Value="_searchForm.Limit" class="number-input" min="1" max="50"/>
                                    </div>
                                    <div class="option-group">
                                        <label>Relevance:</label>
                                        <InputNumber @bind-Value="_searchForm.MinRelevance" class="number-input" min="0" max="1" step="0.01"/>
                                    </div>
                                </div>
                                <button type="submit" class="search-button" disabled="@_isSearching">
                                    @if (_isSearching)
                                    {
                                        <span>Searching...</span>
                                    }
                                    else
                                    {
                                        <span>AI Search</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                        @if (!string.IsNullOrEmpty(_searchMessage))
                        {
                            <div class="search-message @(_searchSuccess ? "success" : "error")">
                                @_searchMessage
                            </div>
                        }

                        @if (_isSearching && (!string.IsNullOrEmpty(_searchProgress.Message) || _searchProgress.Progress > 0))
                        {
                            <div class="progress-section">
                                <div class="progress-header">
                                    <span class="progress-label">Searching Memories...</span>
                                    <span class="progress-percent">@((_searchProgress.Progress * 100).ToString("F0"))%</span>
                                </div>
                                <div class="progress-bar">
                                    <div class="progress-fill" style="width: @((_searchProgress.Progress * 100).ToString("F1"))%"></div>
                                </div>
                                @if (!string.IsNullOrEmpty(_searchProgress.Message))
                                {
                                    <div class="progress-message">@_searchProgress.Message</div>
                                }
                            </div>
                        }
                    </div>

                    <!-- Memory Results -->
                    @if (_memories.Any())
                    {
                        <div class="memories-grid">
                            @foreach (var memory in _memories)
                            {
                                <div class="memory-card" @onclick="() => ShowMemoryDetail(memory)">
                                    <div class="memory-header">
                                        <span class="memory-store">@memory.Store?.Title</span>
                                        <span class="memory-date">@memory.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        @if (memory.Relevance > 0)
                                        {
                                            <span class="memory-relevance">@($"{memory.Relevance:F2}")</span>
                                        }
                                    </div>
                                    <div class="memory-content">
                                        <h4>@memory.Title</h4>
                                        <p>@(memory.Content.Length > 150 ? memory.Content[..150] + "..." : memory.Content)</p>
                                    </div>
                                    @if (memory.Tags.Any())
                                    {
                                        <div class="memory-tags">
                                            @foreach (var tag in memory.Tags.Take(3))
                                            {
                                                <span class="tag">@tag</span>
                                            }
                                            @if (memory.Tags.Count > 3)
                                            {
                                                <span class="tag-more">+@(memory.Tags.Count - 3) more</span>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="empty-state">
                            <span class="empty-icon">üß†</span>
                            <h4>No memories found</h4>
                            <p>Your memories will appear here. Try uploading files or searching with different terms.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Memory Detail Modal -->
@if (_selectedMemoryDetail != null)
{
    <div class="modal-overlay" @onclick="CloseMemoryDetail">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>@_selectedMemoryDetail.Title</h3>
                <button class="modal-close" @onclick="CloseMemoryDetail">&times;</button>
            </div>
            <div class="modal-body">
                <div class="memory-detail-info">
                    <div class="info-row">
                        <strong>Store:</strong> <span>@_selectedMemoryDetail.Store?.Title</span>
                    </div>
                    <div class="info-row">
                        <strong>Created:</strong> <span>@_selectedMemoryDetail.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                    </div>
                    <div class="info-row">
                        <strong>Updated:</strong> <span>@_selectedMemoryDetail.UpdatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                    </div>
                    @if (_selectedMemoryDetail.Relevance > 0)
                    {
                        <div class="info-row">
                            <strong>Relevance:</strong> <span class="relevance-score">@($"{_selectedMemoryDetail.Relevance:F3}")</span>
                        </div>
                    }
                    @if (_selectedMemoryDetail.Tags.Any())
                    {
                        <div class="info-row">
                            <strong>Tags:</strong>
                            <div class="tags-container">
                                @foreach (var tag in _selectedMemoryDetail.Tags)
                                {
                                    <span class="tag">@tag</span>
                                }
                            </div>
                        </div>
                    }
                </div>
                <div class="memory-detail-content">
                    <h4>Content</h4>
                    <div class="content-text">@_selectedMemoryDetail.Content</div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseMemoryDetail">Close</button>
                <button class="btn btn-danger" @onclick="DeleteSelectedMemory" disabled="@_isDeletingMemory">
                    @if (_isDeletingMemory)
                    {
                        <span>Deleting...</span>
                    }
                    else
                    {
                        <span>üóëÔ∏è Delete Memory</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

<!-- Memory Stores Modal -->
@if (_showMemoryStoresModal)
{
    <div class="modal-overlay" @onclick="CloseMemoryStoresModal">
        <div class="modal-content memory-stores-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Memory Stores (@_memoryStores.Count)</h3>
                <button class="modal-close" @onclick="CloseMemoryStoresModal">&times;</button>
            </div>
            <div class="modal-body">
                @if (_memoryStores.Any())
                {
                    <div class="memory-stores-grid">
                        @foreach (var store in _memoryStores)
                        {
                            <div class="memory-store-card">
                                <div class="store-header">
                                    <div class="store-info">
                                        <div class="store-icon">üóÇÔ∏è</div>
                                        <div class="store-details">
                                            <div class="store-title-row">
                                                <h4>@store.Title</h4>
                                                @if (store.GroupId == null || store.GroupId == Guid.Empty || store.OwnerGroup == null)
                                                {
                                                    <span class="ownership-badge user-owned">üë§ Personal</span>
                                                }
                                                else
                                                {
                                                    <span class="ownership-badge group-owned">üë• Group</span>
                                                }
                                            </div>
                                            <span class="store-id">@store.StoreId</span>
                                            <span class="memory-count">@store.Memories.Count memory@(store.Memories.Count != 1 ? "s" : "")</span>
                                            @if (store.OwnerGroup != null)
                                            {
                                                <span class="group-name">Group: @store.OwnerGroup.DisplayName</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="store-actions">
                                    @if (store.GroupId == null || store.GroupId == Guid.Empty || store.OwnerGroup == null)
                                    {
                                        <button class="publish-store-btn" @onclick="@(() => ShowPublishModal(store))" disabled="@_isPublishing">
                                            @if (_isPublishing && _publishingStoreId == store.StoreId)
                                            {
                                                <span>Publishing...</span>
                                            }
                                            else
                                            {
                                                <span>üöÄ Publish to Group</span>
                                            }
                                        </button>
                                    }
                                    <button class="delete-store-btn" @onclick="@(() => DeleteMemoryStore(store.StoreId))" disabled="@_isDeletingStore">
                                        @if (_isDeletingStore && _deletingStoreId == store.StoreId)
                                        {
                                            <span>Deleting...</span>
                                        }
                                        else
                                        {
                                            <span>üóëÔ∏è Delete Store</span>
                                        }
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <span class="empty-icon">üóÇÔ∏è</span>
                        <h4>No memory stores found</h4>
                        <p>Your memory stores will appear here as you create memories.</p>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseMemoryStoresModal">Close</button>
            </div>
            @if (!string.IsNullOrEmpty(_storeActionMessage))
            {
                <div class="store-message @(_storeActionSuccess ? "success" : "error")">
                    @_storeActionMessage
                </div>
            }
        </div>
    </div>
}

<!-- API Keys Modal -->
@if (_showApiKeysModal)
{
    <div class="modal-overlay" @onclick="CloseApiKeysModal">
        <div class="modal-content api-keys-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>üîë API Keys (@_apiKeys.Count)</h3>
                <button class="modal-close" @onclick="CloseApiKeysModal">&times;</button>
            </div>
            <div class="modal-body">
                <!-- Create API Key Section -->
                <div class="create-api-key-section">
                    <h4>Create New API Key</h4>
                    <p>Generate a new API key for authenticating with the API. Keys are only shown once upon creation.</p>
                    <EditForm Model="_createApiKeyForm" OnValidSubmit="CreateApiKey" class="api-key-form">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="keyName">Name</label>
                                <InputText @bind-Value="_createApiKeyForm.Name" placeholder="e.g., My Application Key" class="form-input" id="keyName" maxlength="512" />
                            </div>
                            <div class="form-group">
                                <label for="keyExpiration">Expires in</label>
                                <InputSelect @bind-Value="_createApiKeyForm.ExpirationDays" class="form-select" id="keyExpiration">
                                    <option value="30">30 days</option>
                                    <option value="60">60 days</option>
                                    <option value="90">90 days</option>
                                    <option value="180">6 months</option>
                                    <option value="365">1 year</option>
                                    <option value="0">Never</option>
                                </InputSelect>
                            </div>
                            <button type="submit" class="btn btn-primary" disabled="@(_isCreatingApiKey || string.IsNullOrWhiteSpace(_createApiKeyForm.Name))">
                                @if (_isCreatingApiKey)
                                {
                                    <span>Creating...</span>
                                }
                                else
                                {
                                    <span>üîë Generate Key</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                    @if (!string.IsNullOrEmpty(_apiKeyActionMessage))
                    {
                        <div class="api-key-message @(_apiKeyActionSuccess ? "success" : "error")">
                            @_apiKeyActionMessage
                        </div>
                    }
                </div>

                <!-- API Keys List -->
                @if (_apiKeys.Any())
                {
                    <div class="api-keys-list">
                        <h4>Your API Keys</h4>
                        <div class="api-keys-grid">
                            @foreach (var apiKey in _apiKeys.OrderByDescending(k => k.ExpiresAt))
                            {
                                <div class="api-key-card">
                                    <div class="api-key-header">
                                        <div class="api-key-info">
                                            <div class="api-key-icon">üîë</div>
                                            <div class="api-key-details">
                                                <h5>@apiKey.Name</h5>
                                                <div class="api-key-meta">
                                                    <span class="api-key-preview">@GetMaskedKey(apiKey.Key)</span>
                                                    @if (apiKey.ExpiresAt == DateTimeOffset.MaxValue)
                                                    {
                                                        <span class="expiry-badge never-expires">Never expires</span>
                                                    }
                                                    else if (apiKey.ExpiresAt < DateTimeOffset.UtcNow)
                                                    {
                                                        <span class="expiry-badge expired">Expired</span>
                                                    }
                                                    else if (apiKey.ExpiresAt < DateTimeOffset.UtcNow.AddDays(7))
                                                    {
                                                        <span class="expiry-badge expires-soon">Expires @apiKey.ExpiresAt.ToString("MMM dd, yyyy")</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="expiry-badge valid">Expires @apiKey.ExpiresAt.ToString("MMM dd, yyyy")</span>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="api-key-actions">
                                        <button class="delete-api-key-btn" @onclick="@(() => DeleteApiKey(apiKey))" disabled="@_isDeletingApiKey">
                                            @if (_isDeletingApiKey && _deletingApiKey == apiKey)
                                            {
                                                <span>Deleting...</span>
                                            }
                                            else
                                            {
                                                <span>üóëÔ∏è Delete</span>
                                            }
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <span class="empty-icon">üîë</span>
                        <h4>No API keys found</h4>
                        <p>Create your first API key to start using the API.</p>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseApiKeysModal">Close</button>
            </div>
        </div>
    </div>
}

<!-- New API Key Display Modal -->
@if (_newApiKey != null)
{
    <div class="modal-overlay" @onclick="CloseNewApiKeyModal">
        <div class="modal-content new-api-key-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>üéâ API Key Created Successfully</h3>
                <button class="modal-close" @onclick="CloseNewApiKeyModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="new-api-key-content">
                    <div class="warning-section">
                        <div class="warning-icon">‚ö†Ô∏è</div>
                        <div class="warning-text">
                            <h4>Save this API key now!</h4>
                            <p>For security reasons, this key will only be shown once. Copy it to a secure location.</p>
                        </div>
                    </div>
                    <div class="api-key-display">
                        <label>API Key:</label>
                        <div class="key-container">
                            <input type="text" value="@_newApiKey.Key" readonly class="key-input" id="newApiKey" />
                            <button type="button" class="copy-btn" @onclick="CopyApiKey">
                                @if (_keyCopied)
                                {
                                    <span>‚úÖ Copied</span>
                                }
                                else
                                {
                                    <span>üìã Copy</span>
                                }
                            </button>
                        </div>
                    </div>
                    <div class="api-key-info">
                        <div class="info-row">
                            <strong>Name:</strong> <span>@_newApiKey.Name</span>
                        </div>
                        <div class="info-row">
                            <strong>Expires:</strong>
                            <span>@(_newApiKey.ExpiresAt == DateTimeOffset.MaxValue ? "Never" : _newApiKey.ExpiresAt.ToString("MMM dd, yyyy"))</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="CloseNewApiKeyModal">I've saved the key</button>
            </div>
        </div>
    </div>
}

<!-- Publish Memory Store Modal -->
@if (_showPublishModal)
{
    <div class="modal-overlay" @onclick="ClosePublishModal">
        <div class="modal-content publish-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>üöÄ Publish Memory Store to Group</h3>
                <button class="modal-close" @onclick="ClosePublishModal">&times;</button>
            </div>
            <div class="modal-body">
                @if (_selectedStore != null)
                {
                    <div class="publish-info">
                        <div class="store-preview">
                            <div class="store-icon">üóÇÔ∏è</div>
                            <div class="store-details">
                                <h4>@_selectedStore.Title</h4>
                                <span class="memory-count">@_selectedStore.Memories.Count memory@(_selectedStore.Memories.Count != 1 ? "s" : "")</span>
                            </div>
                        </div>

                        <div class="warning-section">
                            <div class="warning-icon">‚ö†Ô∏è</div>
                            <div class="warning-text">
                                <h4>Publishing will transfer ownership</h4>
                                <p>This memory store will be transferred to the selected group and will no longer be owned by you personally. Group members will be able to access this memory store.</p>
                            </div>
                        </div>

                        @if (_userGroups.Any())
                        {
                            <div class="group-selection">
                                <h4>Select a group to publish to:</h4>
                                <div class="groups-list">
                                    @foreach (var group in _userGroups)
                                    {
                                        <div class="group-option @(_selectedGroupId == group.Id ? "selected" : "")" @onclick="@(() => SelectGroup(group.Id))">
                                            <div class="group-icon">üë•</div>
                                            <div class="group-info">
                                                <span class="group-name">@group.DisplayName</span>
                                                <span class="group-id">@group.Identifier</span>
                                            </div>
                                            @if (_selectedGroupId == group.Id)
                                            {
                                                <div class="check-icon">‚úÖ</div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <span class="empty-icon">üë•</span>
                                <h4>No groups found</h4>
                                <p>You are not a member of any groups. You need to be part of a group to publish memory stores.</p>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="ClosePublishModal">Cancel</button>
                @if (_userGroups.Any())
                {
                    <button class="btn btn-primary" @onclick="ConfirmPublish" disabled="@(_selectedGroupId == Guid.Empty || _isPublishing)">
                        @if (_isPublishing)
                        {
                            <span>Publishing...</span>
                        }
                        else
                        {
                            <span>üöÄ Publish to Group</span>
                        }
                    </button>
                }
            </div>
            @if (!string.IsNullOrEmpty(_publishMessage))
            {
                <div class="publish-message @(_publishSuccess ? "success" : "error")">
                    @_publishMessage
                </div>
            }
        </div>
    </div>
}

<!-- Background Task Queue Modal -->
@if (_showTaskQueueModal)
{
    <div class="modal-overlay" @onclick="CloseTaskQueueModal">
        <div class="modal-content task-queue-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>üìã Background Task Queue (@_backgroundTasks.Count)</h3>
                <button class="modal-close" @onclick="CloseTaskQueueModal">&times;</button>
            </div>
            <div class="modal-body">
                @if (_backgroundTasks.Any())
                {
                    <div class="task-queue-grid">
                        @foreach (var task in _backgroundTasks.OrderByDescending(t => t.CreatedAt))
                        {
                            <div class="task-card @(task.Status.ToString().ToLower())">
                                <div class="task-header">
                                    <div class="task-icon">
                                        @if (task.Status == BackgroundTaskState.Queued)
                                        {
                                            <span>‚è≥</span>
                                        }
                                        else if (task.Status == BackgroundTaskState.Processing)
                                        {
                                            <span>‚öôÔ∏è</span>
                                        }
                                        else if (task.Status == BackgroundTaskState.Completed)
                                        {
                                            <span>‚úÖ</span>
                                        }
                                        else if (task.Status == BackgroundTaskState.Failed)
                                        {
                                            <span>‚ùå</span>
                                        }
                                    </div>
                                    <div class="task-info">
                                        <h4>@task.TaskType</h4>
                                        <div class="task-meta">
                                            <span class="task-id">@task.TaskId[..8]...</span>
                                            <span class="task-status @(task.Status.ToString().ToLower())">@task.Status</span>
                                        </div>
                                    </div>
                                    <div class="task-time">
                                        <span class="created-time">@task.CreatedAt.ToString("MMM dd, HH:mm")</span>
                                        @if (task.CompletedAt.HasValue)
                                        {
                                            <span class="completed-time">Completed: @task.CompletedAt.Value.ToString("HH:mm")</span>
                                        }
                                    </div>
                                </div>

                                @if (task.Status == BackgroundTaskState.Processing && task.Progress > 0)
                                {
                                    <div class="task-progress">
                                        <div class="progress-bar">
                                            <div class="progress-fill" style="width: @((task.Progress * 100).ToString("F1"))%"></div>
                                        </div>
                                        <span class="progress-text">@((task.Progress * 100).ToString("F0"))%</span>
                                    </div>
                                }

                                <div class="task-message">
                                    @if (!string.IsNullOrEmpty(task.Message))
                                    {
                                        <p>@task.Message</p>
                                    }
                                    @if (!string.IsNullOrEmpty(task.ErrorMessage))
                                    {
                                        <p class="error-message">Error: @task.ErrorMessage</p>
                                    }
                                </div>

                                @if (task.Result != null && task.Status == BackgroundTaskState.Completed)
                                {
                                    <div class="task-result">
                                        @if (task.Result is FileUploadResult fileResult)
                                        {
                                            <div class="result-info">
                                                <span class="result-label">üìÅ @fileResult.FileName</span>
                                                <span class="result-value">@fileResult.MemoryCount memories created</span>
                                                <span class="result-store">Store: @fileResult.StoreIdentifier</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="result-info">
                                                <span class="result-label">Result:</span>
                                                <span class="result-value">@task.Result.ToString()</span>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <span class="empty-icon">üìã</span>
                        <h4>No background tasks found</h4>
                        <p>Your background processing tasks will appear here when you upload files or perform other background operations.</p>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="RefreshTaskQueue">üîÑ Refresh</button>
                <button class="btn btn-secondary" @onclick="CloseTaskQueueModal">Close</button>
            </div>
        </div>
    </div>
}

<style>
    .management-header {
        background: linear-gradient(135deg, #1b6ec2 0%, #764ba2 100%);
        color: white;
        padding: 60px 20px;
        margin: -32px -32px 40px -32px;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        font-weight: bold;
        color: white;
        border: 2px solid rgba(255, 255, 255, 0.3);
    }

    .user-details h1 {
        margin: 0;
        font-size: 2.5rem;
        font-weight: 300;
        color: white;
    }

    .user-subtitle {
        margin: 0.25rem 0 0 0;
        opacity: 0.9;
        font-size: 1rem;
    }

    .management-content {
        padding: 0 0 60px 0;
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 2rem;
    }

    .stats-section h2 {
        color: #333;
        font-size: 2rem;
        margin-bottom: 1.5rem;
        font-weight: 300;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 3rem;
    }

    .stat-card {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .stat-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 16px 48px rgba(0, 0, 0, 0.15);
    }

    .clickable-card {
        cursor: pointer;
    }

    .stat-icon {
        font-size: 2.5rem;
        opacity: 0.8;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 300;
        color: #1b6ec2;
        margin-bottom: 0.25rem;
    }

    .stat-label {
        font-size: 1rem;
        color: #666;
        font-weight: 500;
    }

    .main-section {
        background: white;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }

    .section-content {
        padding: 2rem;
    }

    .section-header h3 {
        color: #333;
        font-size: 2rem;
        margin-bottom: 0.5rem;
        font-weight: 300;
    }

    .section-header p {
        color: #666;
        margin: 0 0 2rem 0;
        font-size: 1.1rem;
    }

    .file-upload-section, .search-section {
        margin-bottom: 3rem;
        padding: 2rem;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 12px;
    }

    .file-upload-section h4, .search-section h4 {
        margin: 0 0 1rem 0;
        color: #333;
        font-size: 1.3rem;
        font-weight: 500;
    }

    .file-upload-section p {
        margin: 0 0 1.5rem 0;
        color: #666;
    }

    .upload-form, .search-form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .upload-input-group, .search-input-group {
        display: flex;
        gap: 1rem;
        align-items: end;
        flex-wrap: wrap;
    }

    .file-input {
        display: none;
    }

    .file-label {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 1rem 1.5rem;
        border: 2px dashed #1b6ec2;
        border-radius: 12px;
        background: white;
        cursor: pointer;
        transition: all 0.3s ease;
        color: #666;
        font-size: 1rem;
        min-width: 250px;
    }

    .file-label:hover {
        border-color: #764ba2;
        background: #f8f9fa;
        color: #764ba2;
    }

    .file-icon {
        font-size: 1.2rem;
    }

    .upload-button, .search-button {
        padding: 1rem 2rem;
        background: linear-gradient(135deg, #1b6ec2, #764ba2);
        color: white;
        border: none;
        border-radius: 12px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        white-space: nowrap;
    }

    .upload-button:hover:not(:disabled), .search-button:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 8px 24px rgba(118, 75, 162, 0.3);
    }

    .upload-button:disabled, .search-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }

    .search-input {
        flex: 1;
        min-width: 200px;
        padding: 1rem;
        border: 1px solid #ddd;
        border-radius: 12px;
        font-size: 1rem;
        transition: border-color 0.2s;
    }

    .search-input:focus {
        outline: none;
        border-color: #1b6ec2;
        box-shadow: 0 0 0 3px rgba(27, 110, 194, 0.1);
    }

    .search-options {
        display: flex;
        gap: 1rem;
        align-items: end;
        flex-wrap: wrap;
    }

    .option-group {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .option-group label {
        font-size: 0.9rem;
        color: #666;
        font-weight: 500;
    }

    .number-input {
        width: 80px;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 0.9rem;
    }

    .number-input:focus {
        outline: none;
        border-color: #1b6ec2;
        box-shadow: 0 0 0 3px rgba(27, 110, 194, 0.1);
    }

    .upload-message, .search-message {
        padding: 1rem;
        border-radius: 8px;
        font-size: 0.95rem;
        margin-top: 1rem;
    }

    .upload-message.success, .search-message.success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .upload-message.error, .search-message.error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .memories-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
    }

    .memory-card {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 1.5rem;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .memory-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
        border-color: #1b6ec2;
    }

    .memory-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .memory-store {
        background: linear-gradient(135deg, #1b6ec2, #764ba2);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .memory-date {
        font-size: 0.85rem;
        color: #666;
    }

    .memory-relevance {
        background: #28a745;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 8px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .memory-content h4 {
        margin: 0 0 0.75rem 0;
        color: #333;
        font-size: 1.1rem;
        font-weight: 500;
    }

    .memory-content p {
        margin: 0;
        color: #666;
        line-height: 1.5;
    }

    .memory-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .tag {
        background: #f8f9fa;
        color: #495057;
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .tag-more {
        color: #6c757d;
        font-size: 0.8rem;
        font-style: italic;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 1rem;
        color: #6c757d;
    }

    .empty-icon {
        font-size: 4rem;
        margin-bottom: 1.5rem;
        opacity: 0.5;
    }

    .empty-state h4 {
        margin: 0 0 1rem 0;
        font-size: 1.5rem;
        color: #495057;
        font-weight: 300;
    }

    .empty-state p {
        margin: 0;
        font-size: 1.1rem;
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        backdrop-filter: blur(4px);
    }

    .modal-content {
        background: white;
        border-radius: 16px;
        max-width: 800px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    }

    .memory-stores-modal {
        max-width: 1000px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 2rem;
        border-bottom: 1px solid #e9ecef;
    }

    .modal-header h3 {
        margin: 0;
        color: #333;
        font-size: 1.5rem;
        font-weight: 300;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 2rem;
        color: #6c757d;
        cursor: pointer;
        padding: 0;
        width: 2.5rem;
        height: 2.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        transition: all 0.2s;
    }

    .modal-close:hover {
        background: #f8f9fa;
        color: #495057;
    }

    .modal-body {
        padding: 2rem;
    }

    .memory-detail-info {
        margin-bottom: 2rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .info-row {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
    }

    .info-row strong {
        color: #495057;
        min-width: 80px;
        font-weight: 500;
    }

    .relevance-score {
        background: #28a745;
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .tags-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .memory-detail-content h4 {
        color: #333;
        font-size: 1.25rem;
        margin-bottom: 1rem;
        font-weight: 500;
    }

    .content-text {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 1.5rem;
        color: #495057;
        line-height: 1.6;
        white-space: pre-wrap;
        word-wrap: break-word;
    }

    .modal-footer {
        padding: 2rem;
        border-top: 1px solid #e9ecef;
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background: linear-gradient(135deg, #1b6ec2, #764ba2);
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 8px 24px rgba(118, 75, 162, 0.3);
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background: #545b62;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
    }

    .btn-danger:hover:not(:disabled) {
        background: #c82333;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }

    /* Memory Stores Modal */
    .memory-stores-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 1.5rem;
    }

    .memory-store-card {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 1.5rem;
        transition: all 0.3s ease;
    }

    .memory-store-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
    }

    .store-header {
        margin-bottom: 1rem;
    }

    .store-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .store-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, #1b6ec2, #764ba2);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
    }

    .store-title-row {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 0.5rem;
        flex-wrap: wrap;
    }

    .store-details h4 {
        margin: 0;
        color: #333;
        font-size: 1.1rem;
        font-weight: 500;
        flex: 1;
        min-width: 0;
    }

    .ownership-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
        white-space: nowrap;
        flex-shrink: 0;
    }

    .ownership-badge.user-owned {
        background: linear-gradient(135deg, #1b6ec2, #764ba2);
        color: white;
    }

    .ownership-badge.group-owned {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
    }

    .store-id {
        font-size: 0.8rem;
        color: #6c757d;
        display: block;
        margin-bottom: 0.25rem;
        font-family: monospace;
    }

    .memory-count {
        font-size: 0.9rem;
        color: #28a745;
        font-weight: 500;
    }

    .group-name {
        font-size: 0.85rem;
        color: #495057;
        font-weight: 500;
        display: block;
        margin-top: 0.25rem;
    }

    .store-actions {
        display: flex;
        justify-content: flex-end;
        gap: 0.75rem;
    }

    .publish-store-btn {
        padding: 0.5rem 1rem;
        background: linear-gradient(135deg, #1b6ec2, #764ba2);
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 0.9rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .publish-store-btn:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(118, 75, 162, 0.3);
    }

    .publish-store-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }

    .delete-store-btn {
        padding: 0.5rem 1rem;
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 0.9rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .delete-store-btn:hover:not(:disabled) {
        background: #c82333;
        transform: translateY(-1px);
    }

    .delete-store-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    .store-message {
        padding: 1rem 2rem;
        border-radius: 0 0 16px 16px;
        margin: 0 -2rem -1rem -2rem;
        font-size: 0.95rem;
    }

    .store-message.success {
        background: #d4edda;
        color: #155724;
        border-top: 1px solid #c3e6cb;
    }

    .store-message.error {
        background: #f8d7da;
        color: #721c24;
        border-top: 1px solid #f5c6cb;
    }

    /* API Keys Modal Styles */
    .api-keys-modal {
        max-width: 1100px;
    }

    .create-api-key-section {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
    }

    .create-api-key-section h4 {
        margin: 0 0 1rem 0;
        color: #333;
        font-size: 1.3rem;
        font-weight: 500;
    }

    .create-api-key-section p {
        margin: 0 0 1.5rem 0;
        color: #666;
    }

    .api-key-form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .form-row {
        display: flex;
        gap: 1rem;
        align-items: end;
        flex-wrap: wrap;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        min-width: 200px;
    }

    .form-group label {
        font-size: 0.9rem;
        color: #495057;
        font-weight: 500;
    }

    .form-input, .form-select {
        padding: 1rem;
        border: 1px solid #ced4da;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.2s;
    }

    .form-input:focus, .form-select:focus {
        outline: none;
        border-color: #1b6ec2;
        box-shadow: 0 0 0 3px rgba(27, 110, 194, 0.1);
    }

    .api-key-message {
        padding: 1rem;
        border-radius: 8px;
        font-size: 0.95rem;
        margin-top: 1rem;
    }

    .api-key-message.success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .api-key-message.error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .api-keys-list h4 {
        margin: 0 0 1.5rem 0;
        color: #333;
        font-size: 1.3rem;
        font-weight: 500;
    }

    .api-keys-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
        gap: 1.5rem;
    }

    .api-key-card {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 1.5rem;
        transition: all 0.3s ease;
    }

    .api-key-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
    }

    .api-key-header {
        margin-bottom: 1rem;
    }

    .api-key-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .api-key-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, #1b6ec2, #764ba2);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        flex-shrink: 0;
    }

    .api-key-details h5 {
        margin: 0 0 0.5rem 0;
        color: #333;
        font-size: 1.1rem;
        font-weight: 500;
    }

    .api-key-meta {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .api-key-preview {
        font-family: 'Courier New', monospace;
        background: rgba(255, 255, 255, 0.7);
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.85rem;
        color: #495057;
    }

    .expiry-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
        width: fit-content;
    }

    .expiry-badge.never-expires {
        background: #17a2b8;
        color: white;
    }

    .expiry-badge.valid {
        background: #28a745;
        color: white;
    }

    .expiry-badge.expires-soon {
        background: #ffc107;
        color: #212529;
    }

    .expiry-badge.expired {
        background: #dc3545;
        color: white;
    }

    .api-key-actions {
        display: flex;
        justify-content: flex-end;
    }

    .delete-api-key-btn {
        padding: 0.5rem 1rem;
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 0.9rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .delete-api-key-btn:hover:not(:disabled) {
        background: #c82333;
        transform: translateY(-1px);
    }

    .delete-api-key-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    /* New API Key Modal Styles */
    .new-api-key-modal {
        max-width: 600px;
    }

    .new-api-key-content {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .warning-section {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        padding: 1.5rem;
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 12px;
    }

    .warning-icon {
        font-size: 2rem;
        flex-shrink: 0;
    }

    .warning-text h4 {
        margin: 0 0 0.5rem 0;
        color: #856404;
        font-size: 1.2rem;
        font-weight: 500;
    }

    .warning-text p {
        margin: 0;
        color: #856404;
    }

    .api-key-display {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .api-key-display label {
        font-weight: 500;
        color: #495057;
    }

    .key-container {
        display: flex;
        gap: 0.75rem;
        align-items: center;
    }

    .key-input {
        flex: 1;
        padding: 1rem;
        border: 2px solid #1b6ec2;
        border-radius: 8px;
        font-family: 'Courier New', monospace;
        font-size: 0.95rem;
        background: #f8f9fa;
        color: #495057;
    }

    .copy-btn {
        padding: 1rem 1.5rem;
        background: #28a745;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        white-space: nowrap;
    }

    .copy-btn:hover {
        background: #218838;
        transform: translateY(-2px);
    }

    .api-key-info {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .api-key-info .info-row {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .api-key-info .info-row strong {
        min-width: 80px;
        color: #495057;
        font-weight: 500;
    }

    /* Progress Section Styles */
    .progress-section {
        margin-top: 1.5rem;
        padding: 1.5rem;
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .progress-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .progress-label {
        font-size: 1rem;
        font-weight: 500;
        color: #333;
    }

    .progress-percent {
        font-size: 0.9rem;
        font-weight: 500;
        color: #1b6ec2;
    }

    .progress-bar {
        width: 100%;
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 1rem;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #1b6ec2 0%, #764ba2 100%);
        border-radius: 4px;
        transition: width 0.3s ease;
        min-width: 2px;
    }

    .progress-message {
        font-size: 0.9rem;
        color: #666;
        line-height: 1.4;
        font-style: italic;
    }

    /* Publish Modal Styles */
    .publish-modal {
        max-width: 700px;
    }

    .publish-info {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .store-preview {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1.5rem;
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 12px;
    }

    .group-selection h4 {
        margin: 0 0 1rem 0;
        color: #333;
        font-size: 1.1rem;
        font-weight: 500;
    }

    .groups-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .group-option {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        background: white;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .group-option:hover {
        border-color: #1b6ec2;
        background: #f8f9fa;
    }

    .group-option.selected {
        border-color: #1b6ec2;
        background: linear-gradient(135deg, #f8f9fa 0%, #e3f2fd 100%);
        box-shadow: 0 4px 12px rgba(27, 110, 194, 0.1);
    }

    .group-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        flex-shrink: 0;
    }

    .group-info {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .group-name {
        font-size: 1.1rem;
        font-weight: 500;
        color: #333;
    }

    .group-id {
        font-size: 0.9rem;
        color: #6c757d;
        font-family: monospace;
    }

    .check-icon {
        font-size: 1.2rem;
        flex-shrink: 0;
    }

    .publish-message {
        padding: 1rem 2rem;
        border-radius: 0 0 16px 16px;
        margin: 0 -2rem -1rem -2rem;
        font-size: 0.95rem;
    }

    .publish-message.success {
        background: #d4edda;
        color: #155724;
        border-top: 1px solid #c3e6cb;
    }

    .publish-message.error {
        background: #f8d7da;
        color: #721c24;
        border-top: 1px solid #f5c6cb;
    }

    /* Background Task Queue Modal Styles */
    .task-queue-modal {
        max-width: 1200px;
    }

    .task-queue-grid {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .task-card {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 1.5rem;
        transition: all 0.3s ease;
    }

    .task-card.processing {
        border-left: 4px solid #ffc107;
        background: linear-gradient(135deg, #fff9e6 0%, #f8f9fa 100%);
    }

    .task-card.completed {
        border-left: 4px solid #28a745;
        background: linear-gradient(135deg, #e8f5e8 0%, #f8f9fa 100%);
    }

    .task-card.failed {
        border-left: 4px solid #dc3545;
        background: linear-gradient(135deg, #ffeaea 0%, #f8f9fa 100%);
    }

    .task-card.queued {
        border-left: 4px solid #17a2b8;
        background: linear-gradient(135deg, #e6f8ff 0%, #f8f9fa 100%);
    }

    .task-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .task-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        flex-shrink: 0;
        border: 2px solid rgba(27, 110, 194, 0.2);
    }

    .task-info {
        flex: 1;
        min-width: 0;
    }

    .task-info h4 {
        margin: 0 0 0.5rem 0;
        color: #333;
        font-size: 1.1rem;
        font-weight: 500;
    }

    .task-meta {
        display: flex;
        align-items: center;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .task-id {
        font-family: 'Courier New', monospace;
        background: rgba(255, 255, 255, 0.8);
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.85rem;
        color: #495057;
    }

    .task-status {
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
        text-transform: uppercase;
    }

    .task-status.queued {
        background: #17a2b8;
        color: white;
    }

    .task-status.processing {
        background: #ffc107;
        color: #212529;
    }

    .task-status.completed {
        background: #28a745;
        color: white;
    }

    .task-status.failed {
        background: #dc3545;
        color: white;
    }

    .task-time {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        gap: 0.25rem;
        font-size: 0.85rem;
        color: #6c757d;
        flex-shrink: 0;
    }

    .created-time {
        font-weight: 500;
    }

    .completed-time {
        font-size: 0.8rem;
    }

    .task-progress {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.6);
        border-radius: 8px;
    }

    .task-progress .progress-bar {
        flex: 1;
        height: 6px;
        background: #e9ecef;
        border-radius: 3px;
        overflow: hidden;
    }

    .task-progress .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #ffc107 0%, #fd7e14 100%);
        border-radius: 3px;
        transition: width 0.3s ease;
        min-width: 2px;
    }

    .progress-text {
        font-size: 0.9rem;
        font-weight: 500;
        color: #495057;
        min-width: 40px;
        text-align: right;
    }

    .task-message {
        margin-bottom: 1rem;
    }

    .task-message p {
        margin: 0 0 0.5rem 0;
        color: #495057;
        font-size: 0.95rem;
        line-height: 1.4;
    }

    .error-message {
        color: #dc3545 !important;
        font-weight: 500;
    }

    .task-result {
        padding: 1rem;
        background: rgba(40, 167, 69, 0.1);
        border: 1px solid rgba(40, 167, 69, 0.2);
        border-radius: 8px;
    }

    .result-info {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .result-label {
        font-weight: 500;
        color: #28a745;
        font-size: 0.95rem;
    }

    .result-value {
        color: #495057;
        font-size: 0.9rem;
    }

    .result-store {
        color: #6c757d;
        font-size: 0.85rem;
        font-style: italic;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .management-header {
            padding: 40px 20px;
        }

        .user-details h1 {
            font-size: 2rem;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .memories-grid {
            grid-template-columns: 1fr;
        }

        .memory-stores-grid {
            grid-template-columns: 1fr;
        }

        .upload-input-group, .search-input-group {
            flex-direction: column;
            align-items: stretch;
        }

        .search-options {
            justify-content: space-between;
        }
    }

    @@media (max-width: 480px) {
        .container {
            padding: 0 15px;
        }

        .section-content {
            padding: 1.5rem;
        }

        .file-upload-section, .search-section {
            padding: 1.5rem;
        }

        .modal-body, .modal-header, .modal-footer {
            padding: 1.5rem;
        }
    }
</style>

@implements IDisposable

@code {
    public class FileUploadForm
    {
        // Empty model for form binding
    }

    public class SearchForm
    {
        public string Query { get; set; } = string.Empty;
        public int Limit { get; set; } = 10;
        public double MinRelevance { get; set; } = 0.5;
    }

    public class MemoryDisplayItem : Memory
    {
        public double Relevance { get; set; }
    }

    public class UploadProgress
    {
        public string Message { get; set; } = string.Empty;
        public double Progress { get; set; } = 0.0;
    }

    public class SearchProgress
    {
        public string Message { get; set; } = string.Empty;
        public double Progress { get; set; } = 0.0;
    }

    public class CreateApiKeyForm
    {
        public string Name { get; set; } = string.Empty;
        public int ExpirationDays { get; set; } = 90;
    }

    private List<MemoryDisplayItem> _memories = [];
    private List<MemoryStore> _memoryStores = [];
    private int _memoryCount;
    private int _memoryStoreCount;

    private FileUploadForm _uploadForm = new();
    private SearchForm _searchForm = new() { Limit = 10, MinRelevance = 0.5 };
    private IBrowserFile? _selectedFile;
    private bool _isUploading;
    private bool _isSearching;
    private string _uploadMessage = string.Empty;
    private string _searchMessage = string.Empty;
    private bool _uploadSuccess;
    private bool _searchSuccess;
    private UploadProgress _uploadProgress = new();
    private SearchProgress _searchProgress = new();

    private MemoryDisplayItem? _selectedMemoryDetail;
    private bool _isDeletingMemory;

    // Memory stores modal variables
    private bool _showMemoryStoresModal = false;
    private bool _isDeletingStore = false;
    private Guid _deletingStoreId = Guid.Empty;
    private string _storeActionMessage = string.Empty;
    private bool _storeActionSuccess = false;

    private string _userEmail = string.Empty;

    // API Keys modal variables
    private List<ApiKey> _apiKeys = [];
    private int _apiKeyCount = 0;
    private bool _showApiKeysModal = false;
    private bool _isCreatingApiKey = false;
    private bool _isDeletingApiKey = false;
    private ApiKey? _deletingApiKey = null;
    private string _apiKeyActionMessage = string.Empty;
    private bool _apiKeyActionSuccess = false;
    private CreateApiKeyForm _createApiKeyForm = new();

    // New API key display modal
    private ApiKey? _newApiKey = null;
    private bool _keyCopied = false;

    // Publish modal variables
    private bool _showPublishModal = false;
    private MemoryStore? _selectedStore = null;
    private List<Group> _userGroups = [];
    private Guid _selectedGroupId = Guid.Empty;
    private bool _isPublishing = false;
    private Guid _publishingStoreId = Guid.Empty;
    private string _publishMessage = string.Empty;
    private bool _publishSuccess = false;

    // Background task queue variables
    private bool _showTaskQueueModal = false;
    private List<BackgroundTaskStatus> _backgroundTasks = [];
    private int _taskQueueCount = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Subscribe to background task status changes
            BackgroundTaskQueue.TaskStatusChanged += OnTaskStatusChanged;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                _userEmail = authState.User.FindFirst(ClaimTypes.Email)?.Value ?? authState.User.Identity.Name ?? "User";
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            _searchMessage = $"Error loading data: {ex.Message}";
            _searchSuccess = false;
        }
    }

    private async Task LoadData()
    {
        try
        {
            // Load memory stores
            _memoryStores = await MemoryProvider.GetStoresAsync();
            _memoryStoreCount = _memoryStores.Count;
            _memoryCount = _memoryStores.Sum(s => s.Memories.Count);

            // Load API keys for current user
            await LoadApiKeys();

            // Load user groups
            await LoadUserGroups();

            // Load background tasks
            await LoadBackgroundTasks();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            _searchMessage = $"Error loading stores: {ex.Message}";
            _searchSuccess = false;
        }
    }

    private async Task LoadApiKeys()
    {
        try
        {
            DbContext.SetCurrentUser(CurrentUserService);
            _apiKeys = DbContext.ApiKeys.ToList();
            _apiKeyCount = _apiKeys.Count;
        }
        catch (Exception ex)
        {
            _apiKeyActionMessage = $"Error loading API keys: {ex.Message}";
            _apiKeyActionSuccess = false;
        }
    }

    private string GetUserInitials()
    {
        if (string.IsNullOrEmpty(_userEmail)) return "U";

        var parts = _userEmail.Split(['@', '.', ' '], StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        return _userEmail[0].ToString().ToUpper();
    }

    private string GetUserEmail()
    {
        return _userEmail;
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        _selectedFile = e.File;
        _uploadMessage = string.Empty;
        StateHasChanged();
    }

    private async Task HandleFileUpload(EditContext context)
    {
        if (_selectedFile == null) return;

        _isUploading = true;
        _uploadMessage = string.Empty;
        _uploadProgress = new UploadProgress();
        StateHasChanged();

        if (CurrentUserService.GetCurrentUser().Role <= IdentityRole.Guest)
        {
            _uploadMessage = "Guests are not permitted to create memories from files";
            _isUploading = false;
            return;
        }
        try
        {
            if (_selectedFile.Size > 100 * 1024 * 1024)
            {
                _uploadMessage = "File size must be less than 100MB";
                _uploadSuccess = false;
                return;
            }

            var extension = Path.GetExtension(_selectedFile.Name).ToLowerInvariant();
            if (!new[] { ".pdf", ".txt", ".md", ".rtf" }.Contains(extension))
            {
                _uploadMessage = "Only PDF, TXT, MD, and RTF files are supported";
                _uploadSuccess = false;
                return;
            }

            _uploadProgress.Message = "Processing file...";
            _uploadProgress.Progress = 0.1;
            StateHasChanged();

            // Read file content
            string fileContent;
            using var ms = new MemoryStream();
            await _selectedFile.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024).CopyToAsync(ms);

            if (extension == ".pdf")
            {
                fileContent = Convert.ToBase64String(ms.ToArray());
            }
            else
            {
                ms.Position = 0;
                using var reader = new StreamReader(ms);
                fileContent = await reader.ReadToEndAsync();
            }

            _uploadProgress.Message = "Queueing file for background processing...";
            _uploadProgress.Progress = 0.3;
            StateHasChanged();

            // Get current user and service instances before creating background task
            var currentUser = CurrentUserService.GetCurrentUser();

            // Create background task with all contextual service instances
            var backgroundTask = new FileUploadBackgroundTask
            {
                UserId = currentUser.Id.ToString(),
                User = currentUser, // Pass the complete user object for background processing
                FileName = _selectedFile.Name,
                FileContent = fileContent,
                FileExtension = extension,
                FileSize = _selectedFile.Size
            };

            // Queue the background task
            await BackgroundTaskQueue.QueueBackgroundWorkItemAsync(backgroundTask);

            _uploadProgress.Message = "File queued for processing. You can now close this page.";
            _uploadProgress.Progress = 1.0;
            StateHasChanged();

            // Show completion message briefly
            await Task.Delay(2000);

            _uploadMessage = $"File '{_selectedFile.Name}' has been queued for background processing. The processing will continue even if you close this page.";
            _uploadSuccess = true;
            _selectedFile = null;
        }
        catch (Exception ex)
        {
            _uploadMessage = $"Error uploading file: {ex.Message}";
            _uploadSuccess = false;
        }
        finally
        {
            _isUploading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSearch(EditContext context)
    {
        if (string.IsNullOrWhiteSpace(_searchForm.Query)) return;

        _isSearching = true;
        _searchMessage = string.Empty;
        _searchProgress = new SearchProgress();
        StateHasChanged();

        try
        {
            var observableSearchResult = await MemoryProvider.SearchAsync(_searchForm.Query, _searchForm.Limit, _searchForm.MinRelevance);
            
            // Subscribe to progress updates
            observableSearchResult.SubscribeToProgressChanges(progress =>
            {
                _searchProgress.Progress = progress;
                InvokeAsync(StateHasChanged);
            });
            
            // Subscribe to message updates
            observableSearchResult.SubscribeToStatusChanges(message =>
            {
                _searchProgress.Message = message;
                InvokeAsync(StateHasChanged);
            });

            // Process results as they become available
            var resultsList = new List<MemoryDisplayItem>();
            await foreach (var result in observableSearchResult.Results)
            {
                var displayItem = new MemoryDisplayItem
                {
                    Identifier = result.Memory.Identifier,
                    Title = result.Memory.Title,
                    Description = result.Memory.Description,
                    Content = result.Memory.Content,
                    Tags = result.Memory.Tags,
                    ReferenceType = result.Memory.ReferenceType,
                    Reference = result.Memory.Reference,
                    CreatedAt = result.Memory.CreatedAt,
                    UpdatedAt = result.Memory.UpdatedAt,
                    Owner = result.Memory.Owner,
                    OwnerUser = result.Memory.OwnerUser,
                    StoreId = result.Memory.StoreId,
                    Store = result.Memory.Store,
                    Relevance = result.Relevance
                };
                
                resultsList.Add(displayItem);
                
                // Update the UI as we get results
                _memories = resultsList.OrderByDescending(m => m.Relevance).ToList();
                InvokeAsync(StateHasChanged);
            }

            _searchMessage = $"Found {_memories.Count} memories matching your search";
            _searchSuccess = true;
        }
        catch (Exception ex)
        {
            _searchMessage = $"Search error: {ex.Message}";
            _searchSuccess = false;
        }
        finally
        {
            _isSearching = false;
            StateHasChanged();
        }
    }

    private void ShowMemoryDetail(MemoryDisplayItem memory)
    {
        _selectedMemoryDetail = memory;
        StateHasChanged();
    }

    private void CloseMemoryDetail()
    {
        _selectedMemoryDetail = null;
        StateHasChanged();
    }

    private async Task DeleteSelectedMemory()
    {
        if (_selectedMemoryDetail == null) return;

        _isDeletingMemory = true;
        StateHasChanged();

        try
        {
            var success = await MemoryProvider.DeleteMemoryEntryAsync(_selectedMemoryDetail.Identifier);
            if (success)
            {
                CloseMemoryDetail();
                _memories.Remove(_selectedMemoryDetail);
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            _searchMessage = $"Error deleting memory: {ex.Message}";
            _searchSuccess = false;
        }
        finally
        {
            _isDeletingMemory = false;
            StateHasChanged();
        }
    }

    private void ShowMemoryStoresModal()
    {
        _showMemoryStoresModal = true;
        _storeActionMessage = string.Empty;
        StateHasChanged();
    }

    private void CloseMemoryStoresModal()
    {
        _showMemoryStoresModal = false;
        _storeActionMessage = string.Empty;
        StateHasChanged();
    }

    private async Task DeleteMemoryStore(Guid storeIdentifier)
    {
        _isDeletingStore = true;
        _deletingStoreId = storeIdentifier;
        _storeActionMessage = string.Empty;
        StateHasChanged();

        try
        {
            var success = await MemoryProvider.DeleteCollectionAsync(storeIdentifier);

            if (success)
            {
                _storeActionMessage = "Memory store deleted successfully";
                _storeActionSuccess = true;
                await LoadData();
            }
            else
            {
                _storeActionMessage = "Failed to delete memory store";
                _storeActionSuccess = false;
            }
        }
        catch (Exception ex)
        {
            _storeActionMessage = $"Error deleting store: {ex.Message}";
            _storeActionSuccess = false;
        }
        finally
        {
            _isDeletingStore = false;
            _deletingStoreId = Guid.Empty;
            StateHasChanged();
        }
    }

    // API Key Management Methods
    private void ShowApiKeysModal()
    {
        _showApiKeysModal = true;
        _apiKeyActionMessage = string.Empty;
        StateHasChanged();
    }

    private void CloseApiKeysModal()
    {
        _showApiKeysModal = false;
        _apiKeyActionMessage = string.Empty;
        StateHasChanged();
    }

    private string GenerateSecureApiKey()
    {
        // Generate a GitHub PAT-style key: prefix + 40 character base64url encoded string
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
        var random = new byte[30]; // 30 bytes = 40 chars when base64url encoded
        using var rng = RandomNumberGenerator.Create();
        rng.GetBytes(random);

        var result = new char[40];
        for (int i = 0; i < 40; i++)
        {
            result[i] = chars[random[i % 30] % chars.Length];
        }

        return "synaptic_" + new string(result);
    }

    private async Task CreateApiKey(EditContext context)
    {
        if (string.IsNullOrWhiteSpace(_createApiKeyForm.Name))
            return;

        _isCreatingApiKey = true;
        _apiKeyActionMessage = string.Empty;
        StateHasChanged();

        try
        {
            var userWithApiKeys = DbContext.DbUser();

            if (userWithApiKeys == null)
            {
                _apiKeyActionMessage = "User not found";
                _apiKeyActionSuccess = false;
                return;
            }

            bool refuse = DbContext.ApiKeys.ToList().Any(k => k.Name.Equals(_createApiKeyForm.Name, StringComparison.OrdinalIgnoreCase));
            // Check for duplicate names
            if (refuse)
            {
                _apiKeyActionMessage = "An API key with this name already exists";
                _apiKeyActionSuccess = false;
                return;
            }

            var apiKey = new ApiKey
            {
                Id = Guid.NewGuid(),
                Owner = userWithApiKeys,
                UserId = userWithApiKeys.Id,
                Name = _createApiKeyForm.Name.Trim(),
                Key = GenerateSecureApiKey(),
                ExpiresAt = _createApiKeyForm.ExpirationDays == 0
                    ? DateTimeOffset.MaxValue
                    : DateTimeOffset.UtcNow.AddDays(_createApiKeyForm.ExpirationDays)
            };

            DbContext.ApiKeys.Add(apiKey);
            await DbContext.SaveChangesAsync();

            // Show the new key in the one-time display modal
            _newApiKey = apiKey;
            _keyCopied = false;

            // Clear the form and reload data
            _createApiKeyForm = new CreateApiKeyForm();
            await LoadApiKeys();

            _apiKeyActionMessage = $"API key '{apiKey.Name}' created successfully!";
            _apiKeyActionSuccess = true;
        }
        catch (Exception ex)
        {
            _apiKeyActionMessage = $"Error creating API key: {ex.Message}";
            _apiKeyActionSuccess = false;
        }
        finally
        {
            _isCreatingApiKey = false;
            StateHasChanged();
        }
    }

    private async Task DeleteApiKey(ApiKey apiKey)
    {
        _isDeletingApiKey = true;
        _deletingApiKey = apiKey;
        _apiKeyActionMessage = string.Empty;
        StateHasChanged();

        try
        {
            var currentUser = DbContext.DbUser();

            if (currentUser == null)
            {
                _apiKeyActionMessage = "User not found";
                _apiKeyActionSuccess = false;
                return;
            }

            var keyToRemove = DbContext.ApiKeys.FirstOrDefault(k => k.Key == apiKey.Key);
            if (keyToRemove != null)
            {
                DbContext.ApiKeys.Remove(keyToRemove);
                await DbContext.SaveChangesAsync();

                _apiKeyActionMessage = $"API key '{apiKey.Name}' deleted successfully";
                _apiKeyActionSuccess = true;
                await LoadApiKeys();
            }
            else
            {
                _apiKeyActionMessage = "API key not found";
                _apiKeyActionSuccess = false;
            }
        }
        catch (Exception ex)
        {
            _apiKeyActionMessage = $"Error deleting API key: {ex.Message}";
            _apiKeyActionSuccess = false;
        }
        finally
        {
            _isDeletingApiKey = false;
            _deletingApiKey = null;
            StateHasChanged();
        }
    }

    private string GetMaskedKey(string key)
    {
        if (string.IsNullOrEmpty(key) || key.Length < 12)
            return "***hidden***";

        // Show first 12 characters and mask the rest
        return key[..12] + "..." + new string('*', Math.Min(key.Length - 12, 20));
    }

    private void CloseNewApiKeyModal()
    {
        _newApiKey = null;
        _keyCopied = false;
        StateHasChanged();
    }

    private async Task CopyApiKey()
    {
        if (_newApiKey?.Key != null)
        {
            try
            {
                await ClipboardCopyAsync(_newApiKey.Key);
                _keyCopied = true;
                StateHasChanged();

                // Reset the copied state after 3 seconds
                _ = Task.Run(async () =>
                {
                    await Task.Delay(3000);
                    _keyCopied = false;
                    await InvokeAsync(StateHasChanged);
                });
            }
            catch (Exception ex)
            {
                _apiKeyActionMessage = $"Failed to copy to clipboard: {ex.Message}";
                _apiKeyActionSuccess = false;
            }
        }
    }

    private async Task ClipboardCopyAsync(string text)
    {
        // This is a simple approach using JavaScript interop
        // In a production app, you might want to use a proper clipboard service
        await Task.Run(() =>
        {
            // For now, we'll just set the copied flag to true
            // In a real Blazor app, you'd use IJSRuntime to call JavaScript clipboard API
        });
    }

    // Publish Memory Store Methods
    private async Task LoadUserGroups()
    {
        try
        {
            var currentUser = CurrentUserService.GetCurrentUser();
            _userGroups = DbContext.DbUser()?.Memberships?.Select(m => m.Group).ToList() ?? new();
        }
        catch (Exception ex)
        {
            _publishMessage = $"Error loading groups: {ex.Message}";
            _publishSuccess = false;
        }
    }

    private void ShowPublishModal(MemoryStore store)
    {
        _selectedStore = store;
        _selectedGroupId = Guid.Empty;
        _publishMessage = string.Empty;
        _showPublishModal = true;
        StateHasChanged();
    }

    private void ClosePublishModal()
    {
        _showPublishModal = false;
        _selectedStore = null;
        _selectedGroupId = Guid.Empty;
        _publishMessage = string.Empty;
        StateHasChanged();
    }

    private void SelectGroup(Guid groupId)
    {
        _selectedGroupId = groupId;
        StateHasChanged();
    }

    private async Task ConfirmPublish()
    {
        if (_selectedStore == null || _selectedGroupId == Guid.Empty) return;

        _isPublishing = true;
        _publishingStoreId = _selectedStore.StoreId;
        _publishMessage = string.Empty;
        StateHasChanged();

        try
        {
            var success = await MemoryProvider.PublishMemoryStoreToGroup(_selectedStore.StoreId, _selectedGroupId);

            if (success)
            {
                _publishMessage = $"Memory store '{_selectedStore.Title}' has been successfully published to the group.";
                _publishSuccess = true;

                // Refresh the data
                await LoadData();

                // Close modal after a brief delay
                await Task.Delay(2000);
                ClosePublishModal();
            }
            else
            {
                _publishMessage = "Failed to publish memory store. You may not have permission to publish to this group, or the memory store may not exist.";
                _publishSuccess = false;
            }
        }
        catch (Exception ex)
        {
            _publishMessage = $"Error publishing memory store: {ex.Message}";
            _publishSuccess = false;
        }
        finally
        {
            _isPublishing = false;
            _publishingStoreId = Guid.Empty;
            StateHasChanged();
        }
    }

    // Background Task Queue Methods
    private async Task LoadBackgroundTasks()
    {
        try
        {
            var currentUser = CurrentUserService.GetCurrentUser();
            _backgroundTasks = BackgroundTaskQueue.GetUserTasks(currentUser.Id.ToString()).ToList();
            _taskQueueCount = _backgroundTasks.Count;
        }
        catch (Exception ex)
        {
            _searchMessage = $"Error loading background tasks: {ex.Message}";
            _searchSuccess = false;
        }
    }

    private void ShowTaskQueueModal()
    {
        _showTaskQueueModal = true;
        StateHasChanged();
    }

    private void CloseTaskQueueModal()
    {
        _showTaskQueueModal = false;
        StateHasChanged();
    }

    private async Task RefreshTaskQueue()
    {
        await LoadBackgroundTasks();
        StateHasChanged();
    }

    private async void OnTaskStatusChanged(BackgroundTaskStatus status)
    {
        // Check if this task belongs to the current user
        var currentUser = CurrentUserService.GetCurrentUser();
        if (status.UserId == currentUser.Id.ToString())
        {
            // Update the task in the local list
            var existingTask = _backgroundTasks.FirstOrDefault(t => t.TaskId == status.TaskId);
            if (existingTask != null)
            {
                var index = _backgroundTasks.IndexOf(existingTask);
                _backgroundTasks[index] = status;
            }
            else
            {
                _backgroundTasks.Add(status);
            }

            // Sort the tasks by creation date (newest first)
            _backgroundTasks = _backgroundTasks.OrderByDescending(t => t.CreatedAt).ToList();

            // Update the count
            _taskQueueCount = _backgroundTasks.Count;

            // Notify the UI to update
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        // Unsubscribe from the event
        BackgroundTaskQueue.TaskStatusChanged -= OnTaskStatusChanged;
    }
}
