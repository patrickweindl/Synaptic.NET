// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Synaptic.NET.Domain.Resources;

#nullable disable

namespace Synaptic.NET.Domain.Migrations
{
    [DbContext(typeof(SynapticDbContext))]
    [Migration("20250906130522_BackingPropertiesForUnsaveableGuidValues")]
    partial class BackingPropertiesForUnsaveableGuidValues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Synaptic.NET.Domain.Resources.Management.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "group_id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "group_name");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "group_identifier");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Synaptic.NET.Domain.Resources.Management.GroupMembership", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupMemberships");
                });

            modelBuilder.Entity("Synaptic.NET.Domain.Resources.Management.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "user_id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "display_name");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "user_identifier");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "user_role");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Synaptic.NET.Domain.Resources.Storage.Memory", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<int>("MemoryStore")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Owner")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "owner");

                    b.Property<bool>("Pinned")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "pinned");

                    b.Property<string>("Reference")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "reference");

                    b.Property<int>("ReferenceType")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "reference_type");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Identifier");

                    b.HasIndex("StoreId");

                    b.ToTable("Memories");

                    b.HasAnnotation("Relational:JsonPropertyName", "memories");
                });

            modelBuilder.Entity("Synaptic.NET.Domain.Resources.Storage.MemoryStore", b =>
                {
                    b.Property<Guid>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "store_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("StoreId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("MemoryStores");
                });

            modelBuilder.Entity("Synaptic.NET.Domain.Resources.Management.GroupMembership", b =>
                {
                    b.HasOne("Synaptic.NET.Domain.Resources.Management.Group", "Group")
                        .WithMany("Memberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Synaptic.NET.Domain.Resources.Management.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synaptic.NET.Domain.Resources.Storage.Memory", b =>
                {
                    b.HasOne("Synaptic.NET.Domain.Resources.Storage.MemoryStore", "Store")
                        .WithMany("Memories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Synaptic.NET.Domain.Resources.Storage.MemoryStore", b =>
                {
                    b.HasOne("Synaptic.NET.Domain.Resources.Management.Group", "OwnerGroup")
                        .WithMany("Stores")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Synaptic.NET.Domain.Resources.Management.User", "OwnerUser")
                        .WithMany("Stores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OwnerGroup");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Synaptic.NET.Domain.Resources.Management.Group", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Synaptic.NET.Domain.Resources.Management.User", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Synaptic.NET.Domain.Resources.Storage.MemoryStore", b =>
                {
                    b.Navigation("Memories");
                });
#pragma warning restore 612, 618
        }
    }
}
